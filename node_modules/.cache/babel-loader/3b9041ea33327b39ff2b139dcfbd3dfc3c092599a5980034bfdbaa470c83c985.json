{"ast":null,"code":"export default {\n  data() {\n    return {\n      movie: {\n        credits: {\n          crew: {}\n        },\n        images: {\n          backdrops: {}\n        }\n      },\n      isVideo: false,\n      mediaURL: \"\",\n      dialog: false\n    };\n  },\n  mounted() {\n    this.fetchMovie(this.$route.params.id);\n  },\n  watch: {\n    \"$route.params.id\": {\n      handler() {\n        this.fetchMovie(this.$route.params.id);\n      },\n      immediate: true\n    }\n  },\n  computed: {\n    posterPath() {\n      return \"https://image.tmdb.org/t/p/w500/\" + this.movie.poster_path;\n    }\n  },\n  methods: {\n    async fetchMovie(movieId) {\n      const response = await this.$http.get(\"/movie/\" + movieId + \"?append_to_response=credits,videos,images\");\n      this.movie = response.data;\n    },\n    openYoutubeModel() {\n      this.mediaURL = this.youtubeVideo();\n      this.isVideo = true;\n    },\n    youtubeVideo() {\n      if (!this.movie.videos) return;\n      return \"https://www.youtube.com/embed/\" + this.movie.videos.results[0].key;\n    }\n  }\n};","map":{"version":3,"names":["data","movie","credits","crew","images","backdrops","isVideo","mediaURL","dialog","mounted","fetchMovie","$route","params","id","watch","handler","immediate","computed","posterPath","poster_path","methods","movieId","response","$http","get","openYoutubeModel","youtubeVideo","videos","results","key"],"sources":["src/components/MovieDetail.vue"],"sourcesContent":["<template>\n    <div></div>\n</template>\n\n<script>\nexport default {\n    data(){\n        return {\n            movie: {\n                credits:{\n                    crew: {},\n                },\n                images: {\n                    backdrops: {},\n                },\n            },\n            isVideo: false,\n            mediaURL: \"\",\n            dialog: false,\n        }\n    },\n    mounted(){\n        this.fetchMovie(this.$route.params.id);\n    },\n    watch: {\n        \"$route.params.id\":{\n            handler(){\n                this.fetchMovie(this.$route.params.id);\n            },\n            immediate: true,\n        }\n    },\n    computed: {\n        posterPath(){\n            return \"https://image.tmdb.org/t/p/w500/\" + this.movie.poster_path;\n        }\n    },\n    methods: {\n        async fetchMovie(movieId){\n            const response = await this.$http.get(\n                \"/movie/\" + movieId + \"?append_to_response=credits,videos,images\"\n            );\n            this.movie = response.data;\n        },\n        openYoutubeModel(){\n            this.mediaURL = this.youtubeVideo();\n            this.isVideo = true;\n        },\n        youtubeVideo(){\n            if(!this.movie.videos) return;\n            return (\n                \"https://www.youtube.com/embed/\" + this.movie.videos.results[0].key\n            )\n        }\n    }\n}\n</script>\n\n<style>\n.iframe-container {\n    overflow: hidden;\n    padding-top: 56.25%;\n    position: relative;\n}\n.iframe-container iframe {\n    border: 0;\n    height: 100%;\n    left: 0;\n    position: absolute;\n    top: 0;\n    width: 100%;\n}\n</style>"],"mappings":"AAKA;EACAA,KAAA;IACA;MACAC,KAAA;QACAC,OAAA;UACAC,IAAA;QACA;QACAC,MAAA;UACAC,SAAA;QACA;MACA;MACAC,OAAA;MACAC,QAAA;MACAC,MAAA;IACA;EACA;EACAC,QAAA;IACA,KAAAC,UAAA,MAAAC,MAAA,CAAAC,MAAA,CAAAC,EAAA;EACA;EACAC,KAAA;IACA;MACAC,QAAA;QACA,KAAAL,UAAA,MAAAC,MAAA,CAAAC,MAAA,CAAAC,EAAA;MACA;MACAG,SAAA;IACA;EACA;EACAC,QAAA;IACAC,WAAA;MACA,iDAAAjB,KAAA,CAAAkB,WAAA;IACA;EACA;EACAC,OAAA;IACA,MAAAV,WAAAW,OAAA;MACA,MAAAC,QAAA,cAAAC,KAAA,CAAAC,GAAA,CACA,YAAAH,OAAA,8CACA;MACA,KAAApB,KAAA,GAAAqB,QAAA,CAAAtB,IAAA;IACA;IACAyB,iBAAA;MACA,KAAAlB,QAAA,QAAAmB,YAAA;MACA,KAAApB,OAAA;IACA;IACAoB,aAAA;MACA,UAAAzB,KAAA,CAAA0B,MAAA;MACA,OACA,wCAAA1B,KAAA,CAAA0B,MAAA,CAAAC,OAAA,IAAAC,GAAA;IAEA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}